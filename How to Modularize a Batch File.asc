;Introduction / Thesis

:Hi everyone.

:This presentation is about a really old technology, Windows' batch files. Does anybody use 
Windows' batch files?

:[I am obsessed with batch files at the moment, hence this presentation.]

:Many batch files I've seen in the wild are pretty messy. They are often quite long and not 
well structured. I know this partly because I've written hundreds like them. I wrote batch 
files for years that were a mess. I like to think I'm a little better now.

:For Example, I googled "typical batch file" and this was the first hit:

https://www.instructables.com/id/5-Cool-Batch-Files/

I don't know about you, but trying to figure out gives me a small headache. And it's not even 
that bad compared many I've seen.

:The lack of structure is a problem and leads to hard to read and understand code.



;How to Modularize

:So let's impose some structure. In most programming languages there's a concept of a 
function.

:At the heart of Composable Batch Files is the enforcing the use of traditional functions
or code blocks.

:Anatomy of a function. Here are the basic structural elements:

::[label] = function name (which must be unique)

::call :[label] = function call to another function in this batch file.

::goto [label] = also a function call, which does not return to the caller

::exit/b - end of function. The lack of exit/b is the most common culprit. Without ending 
functions, you have spaghetti code.

::Example of a structured, functionalized approach:



;Setup Instructions

:Add %COMPOSABLE_BATCH_FILES% as an environment variable or, at least, add it to your path to 
where you installed the repository.

:If you so choose, also add these environment variables for the following:

::%CBF_DEFAULT_BROWSER%

::%CBF_DEFAULT_TEXT_EDITOR%

::%CBF_DEFAULT_REPOSITORY_FOLDER%

:Double click the shortcut titled "Composable Batch Files Helper" to open up a blue command 
prompt.



;Functionalized Hello World

:Let's see some code run.

:Do hello world.bat example

::correlation of percent 1 and first thing you type

::Is this goto confusing? I would argue no.

:Each function is a self-contained unit that should generally speaking, be short. If you need 
to do multiple things, you probably should break the function up. That is a good programming
practice in almost any language.

:Notice exit/b.



;Leveraging Environment Variables

:Besides functionalization, another feature CBF provides is leveraging environment variables. 
This is achieved by mapping nicknames to environment variables.There is a file named n.bat 
whose sole purpose is to do this mapping. For example, iin n.bat, you could add a function 
with the name/nickname of temp and mapped the temp foder to cbf_path. Then because td.bat uses 
feature, typing ttd temp would navigate to the temp folder.

:Some Useful(?) Customizable Batch Files, 3 Examples: (!bmmod)

:search like a boss

::navigate like a boss

::surf like a boss

:some example mappings

:td.bat, of.bat cbf_path

:sf.bat cbf_url

:no.bat cbf_filename

:cbf_application

:n.bat is a only purpose is to set environment variable nicknames

:CBF leverages a number of environment variavles.

:That's the end of the overview.

:intermission

:in-depth

:personalization

:enabling customizability

:more in-depth

:if you'd like me to continue, please raise your hand

:curious or not

:td

:of

:sf

:m foo

:cs

:fs

:C:\Program Files\MSBuild\Microsoft\Windows Workflow Foundation\bar

::You don't need to know what all the other functions do because foobar is a self-contained 
unit.

:The concept of nicknames and Environment Variables

::env

:goto %1 = label = function name = what I like to call a nickname

:m.bat: methods/YOUR METHODS

::m/?: You don't need to care about all these functions because why? You're going to name your 
function, which is all you need to worry about.

::m foobar

:+ td: Transform Directory. Allows you to assign nicknames to frequently visited folders.

::cd versus td

::td and of

::td: fast navigation

::possibly framework's most used functions

::fast navigation. You are assigning a shortcut to a unique nickname.

:Good td path to demo.

::td temp

::td docs

::td repos

::C:\Users\jonat\Pictures\Saved Pictures

:n.bat: nicknames/properties/YOUR DATA

:Good sample fs search.

::td xu

::fs *.sln

:: know you can do the same thing in Windows Explorer, but you can use this method if you 
prefer the command line or perhaps need a text file of the search results.

:Good sample cs search.

::td xu

::cs UriImageSource *.cs

:+ sf: Web surfing

::c:\sf ttdc

::c:\sf cnn

::bookmarks

::sf ttdc

::sf cnn

::A good sf create new function example.

::Facebook



;Some Useful(?) Turnkey Batch Files, 2 Examples

:To see a list of CBF batch files, type "cbf" at the c: prompt.

::For help: Use "/?". For example, at the c:\ prompt, type "m/?".

::The ultimate point of the batch file is to provide value.

:I don't like the windows file searcher in Windows Explorer.

:+ fs

::td xu, fs *.sln over 400 solutions!

::You could do the same in Windows Explorer but have a search results document to study.

::I've used this many times for MP3 filename searches.

:+ cs: ImageSource.FromUri

::td xu



;Conclusion

:The composition structure shown is a tool that let's you know what's going on and should make 
the code more readable and easier to work with.

:To download and for more information, see:

:Questions?



;Preparation Reading for Me (!prep)

:I am not saying this is the only way to functionalize batch file.

:I will try to make this as painless as possible.

:While terseness is great, more important I maintain are readability, maintainability, 
reusability and composability.

:Here is the Wikipedia hello world batch file is 3 lines of code.

@ECHO OFF
ECHO Hello World!
PAUSE

:1985 first windows version 1 dos
                                                      s
:[I have never presented on this so things will probably be a bit rough.]

:focus is on readable composable code

:functionalized approach

:Redo Readme.md based to support this thesis.

:Helps to organize. Helps to remembering commands that you use.

:Do you feel like you know what's going on with bat file? Is it predictable? Are you 
confident you know what the flow is?

:Once you know the structure and the design philosophy, it's not complicated, right?

:Wouldn't it be cool if we could juxtapose the command and code windows?

:Why are most long batch files overly complex? For the same reason, I would argue, that most 
long functions are. The problem is the LONG part. The solution is modularization.

:If only there were a way to separate out things into functions, like most programming 
languages.



;EOF